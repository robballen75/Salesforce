<apex:page controller="GC1" sidebar="false" showheader="false"> 
    
    <!-- Google API inclusion -->
    <apex:includeScript id="a" value="https://www.google.com/jsapi" />
     	 <style type="text/css">
        H1 { font-weight: bold; font-size:24; }
    </style>
   
 
    <!-- Google Charts will be drawn in this DIV -->
    <center><h1>Patent Companion Dashboard (beta)</h1></center><br></br>
    <hr></hr>
    <h2>Scan Details</h2><br></br>
    <br></br>
    <table><tr><td><div id="TotalScansAllTimeDiv"  /></td><td></td></tr></table>
<div id="ScansPerDayPast2WeeksDiv" />
    <div id="ScansByMonthPastYearDiv" />
    <div id="TotalIssuesAllTimeDiv" />
    <table><tr><td><div id="TotalIssuesAllTimeColumnDiv" /></td><td> <div id="issueCountByTypeDiv" /></td></tr></table>
    
   
    <h2>Contract Details</h2><br></br>
    
    
    <div id="ContractAndUserCountsDiv" style="width:400px"/><br></br>
    <div id="ScanDetailforAcviveEvaluationsDiv" style="width:800px" />
    
    
    <div id="ScansPerDayPast60daysByAccountDiv" />
 
    
    <script type="text/javascript">
        // Load the Visualization API and the piechart package.
        //google.load('visualization', '1', {'packages':['corechart','table','gauge']});
       google.load('visualization', '1.1', {packages:['bar', 'corechart', 'table', 'gauge']});
        //google.load('visualization', '1', {packages: ['table']});
        // google.load('visualization', '1', {packages:['gauge']});
        //google.load('visualization', '1', {packages: ['bar']});
      
        // Set a callback to run when the Google Visualization API is loaded.
        google.setOnLoadCallback(initCharts);

        function initCharts() {         
          // Following the usual Remoting syntax
          // [<namespace>.]<controller>.<method>([params...,] <callbackFunction>(result, event) {...}
          // controller : GoogleChartsController
          // method : loadOpps
          GC1.loadContractsAndUserCounts( 
                           function(result, event){  
                     // load Column chart
                     var visualization = new google.visualization.Table(document.getElementById('ContractAndUserCountsDiv'));
                     // Prepare table model for chart with columns
                     var data = new google.visualization.DataTable();
                     data.addColumn('string', 'Contract Name');
        			 data.addColumn('number', 'User Count');
        
			        // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                        data.addRow([r.Name, r.Patent_Companion_Users__c ]); 
                      }
               
                    // all done, lets draw the chart with some options to make it look nice.
                    visualization.draw(data,{title: 'Contracts and User Counts'});
              }, {escape:true});
          
          
          GC1.loadScansPerDayPast2Weeks( 
                 function(result, event){  
                     // load Column chart
                     var ScansPerDayPast2WeeksVisualization = new google.visualization.LineChart(document.getElementById('ScansPerDayPast2WeeksDiv'));
                     // Prepare table model for chart with columns
                     var data = new google.visualization.DataTable();
                    
        			  data.addColumn('date', 'Scan Date');
        			  data.addColumn('number', 'Scans');
        
			        // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                        data.addRow([new Date(r.res2),r.count1]);
                          
                      }
                
                    // all done, lets draw the chart with some options to make it look nice.
                    ScansPerDayPast2WeeksVisualization.draw(data,{title: 'Scans per day past 2 weeks'});
              }, {escape:true});
          
          
GC1.loadScansByMonthPastYear( 
                 function(result, event){  
                     // load Column chart
                     var ScansByMonthPastYearVisualization = new google.visualization.LineChart(document.getElementById('ScansByMonthPastYearDiv'));
                     // Prepare table model for chart with columns
                     var data = new google.visualization.DataTable();
                     var month;
        			  data.addColumn('string', 'Month');
        			  data.addColumn('number', 'Scans');
        
			        // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                        if (r.month == 1) month = 'January';
                        if (r.month == 2) month = 'February';
                        if (r.month == 3) month = 'March'; 
                        if (r.month == 4) month = 'April'; 
                        if (r.month == 5) month = 'May'; 
                        if (r.month == 6) month = 'June'; 
                        if (r.month == 7) month = 'July'; 
                        if (r.month == 8) month = 'August'; 
                        if (r.month == 9) month = 'September'; 
                        if (r.month == 10) month = 'October'; 
                        if (r.month == 11) month = 'November'; 
                        if (r.month == 12) month = 'December';  
                        data.addRow([month,r.counts]);
                          
                      }
                
                    // all done, lets draw the chart with some options to make it look nice.
                    ScansByMonthPastYearVisualization.draw(data,{title: 'Scans per month past year'});
              }, {escape:true});
          


  GC1.loadScanDetailforAcviveEvaluations( 
                 function(result, event){  
                     // load Column chart
                     var ScanDetailforAcviveEvaluationsVisualization = new google.visualization.Table(document.getElementById('ScanDetailforAcviveEvaluationsDiv'));
                     // Prepare table model for chart with columns
                     var data = new google.visualization.DataTable();
                     data.addColumn('string', 'Name');
//                     data.addComumn('date','Evaluation End Date');
                     data.addColumn('date', 'Evaluation End Date');
                     data.addColumn('date', 'Last Scan');
                     data.addColumn('number', 'Scans To Date');
                     
                                          
                     // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                        data.addRow([r.ContractIndividual__r.Name,new Date(r.EndDate),new Date(r.ContractIndividual__r.Patent_Companion_Last_Scan__c),r.ContractIndividual__r.Patent_Companion_scans_to_date__c]); 
                      }
                    // all done, lets draw the chart with some options to make it look nice.
                    ScanDetailforAcviveEvaluationsVisualization.draw(data,{title: 'Scan detail for active evaluations'});
              }, {escape:true});


  GC1.loadTotalScansAllTime( 
                 function(result, event){  
                     // load Column chart
                     var TotalScansAllTimeVisualization = new google.visualization.Gauge(document.getElementById('TotalScansAllTimeDiv'));
                     var data = new google.visualization.DataTable();
                     data.addColumn('string', 'Total Scans');
                     data.addColumn('number', 'Scans To Date');
                     var options = {
          
          redFrom: 0, redTo: 100,
          yellowFrom:101, yellowTo: 299,
          greenFrom:300, greenTo: 500,
          minorTicks: 0,
          min:0,
          max:500,
          width:150,
          height:150,
          'animation.startup':true
        };
                                          
                     // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                        
                        data.addRow(['Total Scans',r.howManyScans]); 
                      }
                    // all done, lets draw the chart with some options to make it look nice.
                    TotalScansAllTimeVisualization.draw(data,options);
              }, {escape:true});

          
            GC1.loadTotalNumberOfIssuesFound( 
                 function(result, event){  
                     // load Column chart
                     var TotalIssuesAllTimeVisualization = new google.visualization.Gauge(document.getElementById('TotalIssuesAllTimeDiv'));
                     var TotalIssuesAllTimeColumnVisualization = new google.charts.Bar(document.getElementById('TotalIssuesAllTimeColumnDiv'));
                     var data = new google.visualization.DataTable();
                     var data2 = new google.visualization.DataTable();
                     data.addColumn('string', 'Total Issues');
                     data.addColumn('number', 'Total Issues To Date');
                     data2.addColumn('string', 'Issue Type');
                     data2.addColumn('number', 'Unsupported Terms');
                     data2.addColumn('number', 'Antecedent Basis');
                     data2.addColumn('number', 'Limiting Language');
                     data2.addColumn('number', 'Element References');
                     data2.addColumn('number', 'Similar Spelling');
                     
                     

        
                                    
 
    var options2 = {
        width: 300,
        height: 300,
        legend: { position: 'top', maxLines: 3 },
        bar: { groupWidth: '75%' },
        isStacked: true,
        'animation.startup':true,
      };
                  var chart = new google.visualization.ColumnChart(document.getElementById('issueCountByTypeDiv'));                         
                     // add rows from the remoting results
                     for(var i =0; i<result.length;i++){
                        var r = result[i];
                          var int1 = r.unsuported ;
                        data.addRow(['Issues Found',(r.unsupported+ r.spelling+ r.limiting + r.references + r.basis)]); 
                        data2.addRow(['By Issue Type',r.unsupported, r.basis, r.limiting, r.references, r.spelling]);

                      }
                    TotalIssuesAllTimeColumnVisualization.draw(data,options2);
                    
                    
                    chart.draw(data2, options2);
              }, {escape:true});
          
//******************************Scans by account - past 60 days *******************************************// 
                 GC1.loadScansByAccountPast60Days( 
                 function(result, event){  
                     // load Column chart
                    var scansPerDayPast60DaysByAccountVisualization = new google.visualization.ColumnChart(document.getElementById('ScansPerDayPast60daysByAccountDiv'));
                    var data2 = new google.visualization.DataTable();
				
                  
                 //   List<String> accountNameList = new List<String>();
                 //   List<Integer> scanNumberList = new List<Integer>();
                 //   List<Integer> scanDayList = new List<Integer>();
                    
                    var numResults = result.length;
  
    var options2 = {
        width: 600,
        height: 400,
        legend: { position: 'top', maxLines: 3 },
        bar: { groupWidth: '75%' },
        isStacked: true,
        'animation.startup':true,
      };
                    data2.addColumn('string','Account Name');
                    
                    data2.addColumn('number','Scans');
                    data2.addColumn('number','Date');
                     //data2.addColumn('string', 'customer');                  
                    //  add rows from the remoting results
                     
                     for(var i =0; i<result.length;i++){
                     var r = result[i];
                     data2.addRow([r.accountName,r.counts,r.scanDay]);
                 //    accountNameList.set(i,r.accountName);
                //     scanNumberList.set(i,r.counts);
                 //    scanDayList.set(i,r.scanDay);
                       }
                      for (var i2=0; i2 < numResults; i2++){
                      
                      } 
                    scansPerDayPast60DaysByAccountVisualization.draw(data2);
                }, {escape:true});
          
          
  
          
          //don't put anything after this
          } 
               
    </script>
</apex:page>